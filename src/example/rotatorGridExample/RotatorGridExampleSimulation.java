package example.rotatorGridExample;

import at.htlkaindorf.dorjab18.simulation.AbstractSimulation;
import at.htlkaindorf.dorjab18.util.GraphDrawer;
import at.htlkaindorf.dorjab18.util.GraphGrid;
import at.htlkaindorf.dorjab18.util.GraphLine;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;

/**
 * @author dorjab18
 */
public class RotatorGridExampleSimulation extends AbstractSimulation {
    private double time;
    
    private Rotator rot;
    
    private GraphDrawer graphDrawer;
    private GraphLine massGraphLine;
    private GraphLine massConnectionGraphLine;
    
    private GraphGrid graphGrid;
    
    /**
     * Creates new form RotationExampleSimulation
     */
    public RotatorGridExampleSimulation() {
        initComponents();
        
        setPreferredSize(new Dimension(620, 620));
        
        rot = new Rotator(3);
        
        graphDrawer = new GraphDrawer();
        
        massConnectionGraphLine = graphDrawer.createGaphLine();
        massConnectionGraphLine.setPointColor(Color.BLACK);
        massConnectionGraphLine.setPointSize(10);
        massConnectionGraphLine.setPointFlag(GraphLine.PointFlag.
                FIRST_POINT_ONLY);
        massConnectionGraphLine.setLineStyle(GraphLine.LineStyle.VECTOR);
        massConnectionGraphLine.addPoint(new GraphLine.Point());
        massConnectionGraphLine.addPoint(new GraphLine.Point(0, 3));
        
        massGraphLine = graphDrawer.createGaphLine();
        massGraphLine.setLineColor(Color.BLUE);
        massGraphLine.setPointSize(12);
        massGraphLine.setPointFlag(GraphLine.PointFlag.LAST_POINT_ONLY);
        massGraphLine.setMaxPointCount(50);
        massGraphLine.addPoint(new GraphLine.Point(0, 3));
        
        //Set ppu for all graph lines
        graphDrawer.setPpuX(100);
        graphDrawer.setPpuY(100);
        
        graphGrid = new GraphGrid(massGraphLine);
        graphGrid.setGridSpacingXUnit("m");
        graphGrid.setGridSpacingYUnit("m");
        
        centerGraph();
        
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                centerGraph();
            }
        });
    }
    
    private void centerGraph() {
        double centerW = getBounds().width * .5;
        double centerH = getBounds().height * .5;
        
        graphDrawer.setTransX(centerW);
        graphDrawer.setTransY(centerH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void timeElapsed(double deltaTime) {
        this.time += deltaTime;
        
        rot.calculateNewPosition(deltaTime);
        GraphLine.Point massPos = new GraphLine.Point(rot.getX(),
                rot.getY());
        massGraphLine.addPoint(massPos);
        massConnectionGraphLine.getPoint(1).setPoint(massPos);
    }

    @Override
    public void reset() {
        this.time = 0;
        
        rot.reset();
        
        massGraphLine.clearPoints();
        
        GraphLine.Point massPos = new GraphLine.Point(rot.getX(), rot.getY());
        massGraphLine.addPoint(massPos);
        massConnectionGraphLine.getPoint(1).setPoint(massPos);
    }

    @Override
    public void draw(Graphics2D g2d) {
        graphGrid.draw(g2d, getSize());
        
        graphDrawer.draw(g2d);
    }

    @Override
    public String getSimulationName() {
        return "Rotator Grid Example Simulation";
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
