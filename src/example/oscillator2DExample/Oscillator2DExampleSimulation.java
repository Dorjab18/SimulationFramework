package example.oscillator2DExample;

import at.htlkaindorf.dorjab18.simulation.AbstractSimulation;
import at.htlkaindorf.dorjab18.util.GraphDrawer;
import at.htlkaindorf.dorjab18.util.GraphGrid;
import at.htlkaindorf.dorjab18.util.GraphLine;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseEvent;
import javax.swing.event.MouseInputListener;

/**
 *
 * @author dorjab18
 */
public class Oscillator2DExampleSimulation extends AbstractSimulation
         // MouseInputListener: MouseListener + MouseMotionListener
        implements MouseInputListener {
    private Oscillator2DExampleControls controls;
    
    private double time;
    
    private Oscillator2D osci2D;
    
    private GraphDrawer graphDrawer;
    private GraphLine massGraphLine;
    private GraphLine massConnectionLine;
    
    private GraphGrid graphGrid;
    
    private boolean mouseInputFlag;
    
    /**
     * Creates new form RotationExampleSimulation
     */
    public Oscillator2DExampleSimulation() {
        initComponents();
        
        setPreferredSize(new Dimension(700, 700));
        
        osci2D = new Oscillator2D();
        
        graphDrawer = new GraphDrawer();
        
        massConnectionLine = graphDrawer.createGaphLine(true, false);
        massConnectionLine.setLineStyle(GraphLine.LineStyle.SPRING);
        massConnectionLine.addPoint(new GraphLine.Point());
        massConnectionLine.addPoint(new GraphLine.Point());
        
        massGraphLine = graphDrawer.createGaphLine();
        massGraphLine.setPointSize(12);
        massGraphLine.setPointFlag(GraphLine.PointFlag.LAST_POINT_ONLY);
        massGraphLine.setLineColor(Color.BLUE);
        massGraphLine.addPoint(new GraphLine.Point());
        
        //Set ppu and transY for all graph lines
        graphDrawer.setPpuY(300);
        graphDrawer.setPpuX(300);
        graphDrawer.setTransX(getBounds().width * .5);
        graphDrawer.setTransY(getBounds().height * .5);
        
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                graphDrawer.setTransX(getBounds().width * .5);
                graphDrawer.setTransY(getBounds().height * .5);
            }
        });
        
        graphGrid = new GraphGrid(massGraphLine);
        graphGrid.setSubGridCountX(4);
        graphGrid.setSubGridCountY(4);
        graphGrid.setGridSpacingXUnit("m");
        graphGrid.setGridSpacingYUnit("m");
        
        addMouseListener(this);
        addMouseMotionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void timeElapsed(double deltaTime) {
        this.time += deltaTime;
        
        osci2D.calculate(deltaTime);
        
        GraphLine.Point p = new GraphLine.Point(osci2D.getX(),
                osci2D.getY());
        massGraphLine.addPoint(p);
        massConnectionLine.getPoint(1).setPoint(p);
    }

    @Override
    public void reset() {
        this.time = 0;
        
        osci2D.reset();
        
        massGraphLine.clearPoints();
        
        GraphLine.Point startPos = new GraphLine.Point(osci2D.getX(),
                osci2D.getY());
        massGraphLine.addPoint(startPos);
        massConnectionLine.getPoint(1).setPoint(startPos);
    }

    @Override
    public void draw(Graphics2D g2d) {
        graphGrid.draw(g2d, getSize());
        graphDrawer.draw(g2d);
        
        //Draw time
        g2d.setColor(Color.BLACK);
        g2d.setFont(new Font(Font.DIALOG, Font.BOLD, 15));
        g2d.drawString(String.format("t = %04d ms", (int)time), 10, 25);
    }

    @Override
    public String getSimulationName() {
        return "2D Oscillator Simulation Example";
    }
    
    public void setMass(double mass) {
        osci2D.setMass(mass);
    }
    
    public void setSpringConstant(double springConstant) {
        osci2D.setSpringConstant(springConstant);
    }
    
    public void setX0(double x0) {
        osci2D.setX0(x0);
    }
    
    public void setY0(double y0) {
        osci2D.setY0(y0);
    }
    
    public void setV0(double v0) {
        osci2D.setV0(v0);
    }
    
    public void setAlpha(double alpha) {
        osci2D.setAlpha0(Math.toRadians(alpha));
    }

    public void setOscilattor2DControls(Oscillator2DExampleControls controls) {
        this.controls = controls;
        
        osci2D.setMass(controls.getMass());
        osci2D.setSpringConstant(controls.getSpringConstant());
        osci2D.setX0(controls.getX0());
        osci2D.setY0(controls.getY0());
        osci2D.setV0(controls.getV0());
        osci2D.setAlpha0(Math.toRadians(controls.getAlpha()));
        osci2D.reset();
        
        GraphLine.Point startPos = new GraphLine.Point(osci2D.getX(),
                osci2D.getY());
        massGraphLine.getPoint(0).setPoint(new GraphLine.Point(startPos));
        massConnectionLine.getPoint(1).setPoint(new GraphLine.Point(startPos));
    }
    
    //Helper function (Coordination convertion from jframe to graph)
    private GraphLine.Point convertCoordsToGraph(Point coord) {
        GraphLine.Point graphCoord = new GraphLine.Point();
        
        graphCoord.x = (coord.x - massGraphLine.getTransX()) /
                massGraphLine.getPpuX();
        graphCoord.y = -(coord.y - massGraphLine.getTransY()) /
                massGraphLine.getPpuY();
        
        return graphCoord;
    }
    
    private void updateMouseV(GraphLine.Point p) {
        double vx = p.x - controls.getX0();
        double vy = p.y - controls.getY0();
        double v = Math.hypot(vx, vy);
        double alpha = Math.atan2(vy, vx);

        controls.setV0(v);
        controls.setAlpha(Math.toDegrees(alpha));
        osci2D.setV0(v);
        osci2D.setAlpha0(alpha);
        
        massGraphLine.getPoint(1).setPoint(p);

        simlationWindow.forceRedraw();
    }

    @Override
    public void mousePressed(MouseEvent e) {
        if(e.getButton() == MouseEvent.BUTTON1) {
            simlationWindow.reset();
            controls.setStop();
            
            mouseInputFlag = true;
            
            GraphLine.Point p = convertCoordsToGraph(e.getPoint());
            
            double x0 = p.x;
            double y0 = p.y;
            controls.setX0(x0);
            controls.setY0(y0);
            osci2D.setX0(x0);
            osci2D.setY0(y0);
            
            //Graph lines
            massGraphLine.clearPoints();
            
            massGraphLine.setPointFlag(GraphLine.PointFlag.FIRST_POINT_ONLY);
            massGraphLine.setLineStyle(GraphLine.LineStyle.VECTOR);
            
            GraphLine.Point startPos = new GraphLine.Point(x0, y0);
            massGraphLine.addPoint(new GraphLine.Point(startPos));
            massGraphLine.addPoint(new GraphLine.Point(startPos));
            massConnectionLine.getPoint(1).setPoint(new GraphLine.
                    Point(startPos));
            
            simlationWindow.forceRedraw();
        }
    }
    
    @Override
    public void mouseReleased(MouseEvent e) {
        if(e.getButton() == MouseEvent.BUTTON1) {
            GraphLine.Point p = convertCoordsToGraph(e.getPoint());
            
            //Graph lines
            massGraphLine.setPointFlag(GraphLine.PointFlag.LAST_POINT_ONLY);
            massGraphLine.setLineStyle(GraphLine.LineStyle.NORMAL);
            
            updateMouseV(p);
            osci2D.reset();
            
            massGraphLine.removePoint(1);
            
            simlationWindow.forceRedraw();
            
            mouseInputFlag = false;
        }
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        if(mouseInputFlag) {
            GraphLine.Point p = convertCoordsToGraph(e.getPoint());
            updateMouseV(p);
            
            simlationWindow.forceRedraw();
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {}
    @Override
    public void mouseEntered(MouseEvent e) {}
    @Override
    public void mouseExited(MouseEvent e) {}
    @Override
    public void mouseMoved(MouseEvent e) {}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
