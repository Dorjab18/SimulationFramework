package example.circleGraphExample;

import at.htlkaindorf.dorjab18.simulation.AbstractSimulation;
import at.htlkaindorf.dorjab18.util.GraphDrawer;
import at.htlkaindorf.dorjab18.util.GraphLine;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;

/**
 *
 * @author dorjab18 (Code in draw: HS)
 */
public class CircleGraphExampleSimulation extends AbstractSimulation {
    private int pointCount = 1000;
    
    private CircleCalculator circ;
    
    private GraphDrawer graphDrawer;
    
    private GraphLine circleGraphLine;
    
    /**
     * Creates new form RotationExampleSimulation
     */
    public CircleGraphExampleSimulation() {
        initComponents();
        
        setPreferredSize(new Dimension(300, 300));
        
        circ = new CircleCalculator(1);
        
        graphDrawer = new GraphDrawer();
        
        circleGraphLine = graphDrawer.createGaphLine(true, false);
        circleGraphLine.setLineColor(Color.BLUE);
        circleGraphLine.setPoints(circ.calculatePoints(pointCount));
        circleGraphLine.setConnectLastPointToFirst(true);
        
        graphDrawer.setPpuX(100);
        graphDrawer.setPpuY(100);
        
        centerGraph();
        
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                centerGraph();
            }
        });
    }
    
    private void centerGraph() {
        double centerW = getBounds().width * .5;
        double centerH = getBounds().height * .5;
        
        graphDrawer.setTransX(centerW);
        graphDrawer.setTransY(centerH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void timeElapsed(double deltaTime) {}

    @Override
    public void reset() {}

    @Override
    public void draw(Graphics2D g2d) {
        graphDrawer.draw(g2d);
    }

    @Override
    public String getSimulationName() {
        return "Circle Graph Example Simulation";
    }
    
    public void setRadius(double radius) {
        circ.setRadius(radius);
        circleGraphLine.setPoints(circ.calculatePoints(pointCount));
        
        simlationWindow.forceRedraw();
    }
    
    public void setPointCount(int pointCount) {
        this.pointCount = pointCount;
        
        circleGraphLine.setPoints(circ.calculatePoints(pointCount));
        
        simlationWindow.forceRedraw();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
